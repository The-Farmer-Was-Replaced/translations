@code_tooltip_harvest = `harvest()`
Собирает урожай с сущности под дроном.
Если вы собираете урожай с сущности, которую нельзя собрать, она будет уничтожена.

возвращает `True`, если сущность была удалена, `False` в противном случае.

выполнение занимает `200` операций, если сущность была удалена, `1` операция в противном случае.

пример использования:
`harvest()`
@code_tooltip_can_harvest = `can_harvest()`
Используется для определения, полностью ли выросли растения.

возвращает `True`, если под дроном есть сущность, готовая к сбору урожая, `False` в противном случае.

выполнение занимает `1` операцию.

пример использования:
`if can_harvest():
    harvest()`
@code_tooltip_range = `range()`
Генерирует последовательность чисел.

перегрузки:
`range(end)` возвращает последовательность чисел от `0`(включительно) до `end`(исключительно).
`range(start,end)` возвращает последовательность чисел от `start`(включительно) до `end`(исключительно).
`range(start,end,step)` возвращает последовательность чисел от `start`(включительно) до `end`(исключительно) с шагом `step`.

выполнение занимает `1` операцию.

пример использования:
`for i in range(10):
    print(i)

for i in range(2,6):
    print(i)

for i in range(10, 0, -1):
    print(i)`
@code_tooltip_plant = `plant(entity)`
Сажает указанную `сущность` под дроном, если это возможно.
В противном случае ничего не происходит.

возвращает `True`, если удалось посадить, `False` в противном случае.

выполнение занимает `200` операций, если удалось посадить, `1` операция в противном случае.

пример использования:
`plant(Entities.Bush)`
@code_tooltip_move = `move(direction)`
Перемещает дрон в указанном `направлении` на одну клетку.
Если дрон перемещается за край фермы, он возвращается на другую сторону фермы.

`East `  =  вправо
`West `  =  влево
`North`  =  вверх
`South`  =  вниз

возвращает `True`, если дрон переместился, `False` в противном случае.

выполнение занимает `200` операций, если дрон переместился, `1` операция в противном случае.

пример использования:
`move(North)`
@code_tooltip_swap = `swap(direction)`
Меняет местами сущность под дроном с сущностью рядом с дроном в указанном `направлении`.
Не работает со всеми сущностями.
Также работает, если одна (или обе) из сущностей отсутствует (`None`).

возвращает `True`, если удалось, `False` в противном случае.

выполнение занимает `200` операций при успехе, `1` операция в противном случае.

пример использования:
`swap(North)`
@code_tooltip_till = `till()`
Вспахивает землю под дроном, превращая её в `Grounds.Soil`. Если это уже почва, она изменит землю обратно на `Grounds.Turf`.

возвращает `None`

выполнение занимает `200` операций.

пример использования:
`till()`
@code_tooltip_get_pos_x = `get_pos_x()`
Получает текущую x позицию дрона.
Позиция x начинается с `0` на `Западе` и увеличивается в `Восточном` направлении.

возвращает число, представляющее текущую x координату дрона.

выполнение занимает `1` операцию.

пример использования:
`x, y = get_pos_x(), get_pos_y()`
@code_tooltip_get_pos_y = `get_pos_y()`
Получает текущую y позицию дрона.
Позиция y начинается с `0` на `Юге` и увеличивается в `Северном` направлении.

возвращает число, представляющее текущую y координату дрона.

выполнение занимает `1` операцию.

пример использования:
`x, y = get_pos_x(), get_pos_y()`
@code_tooltip_get_world_size = `get_world_size()`
Получает текущий размер фермы.

возвращает длину стороны сетки в направлении с севера на юг.

выполнение занимает `1` операцию.

пример использования:
`for i in range(get_world_size()):
    move(North)`
@code_tooltip_get_entity_type = `get_entity_type()`
Узнает, какой тип сущности находится под дроном.

возвращает `None`, если плитка пуста, в противном случае возвращает тип сущности под дроном.

выполнение занимает `1` операцию.

пример использования:
`if get_entity_type() == Entities.Grass:
    harvest()`
@code_tooltip_get_ground_type = `get_ground_type()`
Узнает, какой тип земли находится под дроном.

возвращает тип земли под дроном.

выполнение занимает `1` операцию.

пример использования:
`if get_ground_type() != Grounds.Soil:
    till()`
@code_tooltip_get_time = `get_time()`
Получает текущее игровое время.

возвращает время в секундах с начала игры.

выполнение занимает `1` операцию.

пример использования:
`start = get_time()

do_something()

time_passed = get_time() - start`
@code_tooltip_get_op_count = `get_op_count()`
Используется для измерения количества выполненных операций.

возвращает количество операций, выполненных с начала выполнения.

выполнение занимает `1` операцию.

пример использования:
`do_something()

print(get_op_count())`
@code_tooltip_trade = `trade(item)`
Пытается купить указанный `item`.
Если `item` нельзя купить или у вас нет необходимых ресурсов, ничего не происходит.

перегрузки:
`trade(item)`: Купить `item` один раз.
`trade(item, n)`: Если `Unlocks.Multi_Trade` разблокирован, это купит `item` `n` раз сразу. Если вы не можете позволить себе все `n` предметов, ничего не будет куплено. Если `Unlocks.Multi_Trade` не разблокирован, выдает ошибку.

возвращает `True`, если удалось купить предметы, `False` в противном случае.

выполнение занимает `200` операций при успехе, `1` операция в противном случае.

пример использования:
`if num_unlocked(Unlocks.Multi_Trade) > 0:
    trade(Items.Carrot_Seed, 10)
else:
    for i in range(10):
        trade(Items.Carrot_Seed)`
@code_tooltip_use_item = `use_item(item)`
Пытается использовать указанный `item`. Можно использовать только с некоторыми предметами, включая `Items.Water_Tank`, `Items.Fertilizer` и `Items.Egg`.

возвращает `True`, если предмет был использован, `False` в противном случае.

выполнение занимает `200` операций при успехе, `1` операция в противном случае.

пример использования:
`use_item(Items.Fertilizer)`
@code_tooltip_get_water = `get_water()`
Получает текущий уровень воды под дроном.

возвращает уровень воды под дроном в виде числа от `0` до `1`.

выполнение занимает `1` операцию.

пример использования:
`if get_water() < 0.5:
    use_item(Items.Water_Tank)`
@code_tooltip_do_a_flip = `do_a_flip()`
Заставляет дрон сделать сальто! Это действие не зависит от улучшений скорости.

возвращает `None`

выполнение занимает 1с.

пример использования:
`while True:
    do_a_flip()`
@code_tooltip_print = `print(something)`
Печатает `something` в воздухе над дроном с помощью дыма. Это действие не зависит от улучшений скорости.
Можно печатать несколько значений одновременно.

возвращает `None`

выполнение занимает 1с.

пример использования:
`print("ground:", get_ground_type())`
@code_tooltip_len = `len(collection)`
Получает количество элементов в списке, множестве, словаре или кортеже.

возвращает длину `collection`.

выполнение занимает `1` операцию.

пример использования:
`for i in range(len(list)):
    list[i] += 1`
@code_tooltip_list = `list()`
Создает новый список.

перегрузки:
`list(collection)`: Создает список с элементами существующего списка, множества, словаря или кортежа.

возвращает список.

выполнение занимает `1 + len(collection)` операций.

пример использования:
`new_list = list((1,2,3))`
@code_tooltip_dict = `dict()`
Создает новый словарь.

перегрузки:
`dict(dictionary)`: Создает копию `dictionary`.

возвращает словарь.

выполнение занимает `1 + len(dictionary)` операций.

пример использования:
`new_dict = dict()`
@code_tooltip_set = `set()`
Создает новое множество.

перегрузки:
`set(collection)`: Создает множество с элементами существующего списка, множества, словаря или кортежа.

возвращает множество.

выполнение занимает `1 + len(collection)` операций.

пример использования:
`new_set = set((1,2,3))`
@code_tooltip_set_execution_speed = `set_execution_speed(speed)`
Ограничивает скорость выполнения программы, чтобы лучше видеть, что происходит.

`speed` равная `1` соответствует скорости дрона без улучшений скорости.
`speed` равная `10` делает выполнение кода в `10` раз быстрее и соответствует скорости дрона после `9` улучшений скорости.
`speed` равная `0.5` делает выполнение кода в два раза медленнее без улучшений скорости. Это может быть полезно, чтобы увидеть, что делает код.

Если `speed` быстрее, чем текущая максимальная скорость выполнения, код будет выполняться на максимальной скорости.

Если `speed` равна `0` или отрицательная, скорость изменяется обратно на максимальную.
Эффект также прекращается, когда выполнение останавливается.

возвращает `None`

выполнение занимает `200` операций.

пример использования:
`set_execution_speed(1)`
@code_tooltip_set_farm_size = `set_farm_size(size)`
Ограничивает размер фермы, чтобы лучше видеть, что происходит.
Также очищает ферму и сбрасывает позицию дрона.
Устанавливает ферму в сетку размером `size` x `size`.
Минимальный возможный размер `3`.
Размер меньше `3` изменит сетку обратно на полный размер.
Эффект также прекращается, когда выполнение останавливается.

возвращает `None`

выполнение занимает `200` операций.

пример использования:
`set_farm_size(5)`
@code_tooltip_num_items = `num_items(item)`
Узнает, сколько у вас сейчас `item`.

возвращает количество `item` в вашем инвентаре.

выполнение занимает `1` операцию.

пример использования:
`if num_items(Items.Fertilizer) == 0:
    trade(Items.Fertilizer)`
@code_tooltip_get_cost = `get_cost(thing)`
Получает стоимость `thing`

Если `thing` это предмет, получает стоимость его покупки при использовании `trade(item)`.
Если `thing` это сущность, получает семена, необходимые для посадки.
Если `thing` это разблокировка, получает стоимость ее разблокировки.

возвращает словарь с предметами в качестве ключей и числами в качестве значений. Каждый предмет сопоставлен с количеством, которое необходимо.
возвращает `None`, если используется на улучшении, которое уже на максимальном уровне.

выполнение занимает `1` операцию.

пример использования:
`cost = get_cost(Unlocks.Carrots)
for item in cost:
    if num_items(item) < cost[item]:
        print("not enough items to unlock carrots")`
@code_tooltip_clear = `clear()`
Удаляет все с фермы и перемещает дрон обратно в позицию `(0,0)`.

возвращает `None`

выполнение занимает `200` операций.

пример использования:
`clear()`
@code_tooltip_get_companion = `get_companion()`
Получает предпочтение компаньона растения под дроном.

возвращает список вида `[companion_type, companion_x_position, companion_y_position]`

выполнение занимает `1` операцию.

пример использования:
`companion = get_companion()
if companion != None:
    print(companion)`
@code_tooltip_unlock = `unlock(unlock)`
Имеет точно такой же эффект, как нажатие кнопки, соответствующей `unlock` в дереве исследований.

возвращает `True`, если разблокировка прошла успешно, `False` в противном случае.

выполнение занимает `200` операций при успехе, `1` операция в противном случае.

пример использования:
`unlock(Unlocks.Carrots)`
@code_tooltip_num_unlocked = `num_unlocked(thing)`
Используется для проверки, разблокирован ли элемент, сущность, земля или предмет.

возвращает `1` плюс количество раз, которое `thing` было улучшено, если `thing` можно улучшить. В противном случае возвращает `1`, если `thing` разблокирован, `0` в противном случае.

выполнение занимает `1` операцию.

пример использования:
`if num_unlocked(Unlocks.Multi_Trade) > 0:
    trade(Items.Carrot_Seed, 10)
else:
    for i in range(10):
        trade(Items.Carrot_Seed)`
@code_tooltip_reset = `reset()`
Сбрасывает ферму обратно в квадрат 1x1, удаляет все ресурсы и блокирует большинство разблокировок.
Не удаляет ваш код.

возвращает `None`

выполнение занимает `200` операций.

пример использования:
`reset()`
@code_tooltip_measure = `measure()`
Может измерять некоторые значения на некоторых сущностях. Эффект этого зависит от сущности.

перегрузки:
`measure()` измеряет сущность под дроном.
`measure(direction)` измеряет соседнюю сущность в `направлении` дрона.

возвращает количество лепестков подсолнуха.
возвращает следующую позицию для сокровища.
возвращает размер кактуса.
возвращает число, соответствующее типу динозавра.
возвращает `None` для всех других сущностей.

выполнение занимает `1` операцию.

пример использования:
`num_petals = measure()`
@code_tooltip_timed_reset = `timed_reset()`
Запускает таймер для таблицы лидеров. Сохраняет игру перед запуском, а затем загружает это сохранение после завершения, чтобы вы не могли получить предметы во время запуска.

возвращает `None`

выполнение занимает `200` операций.

пример использования:
`timed_reset()`
@code_tooltip_quick_print = `quick_print()`
Печатает значение так же, как `print()`, но не останавливается, чтобы написать его в воздухе, поэтому его можно найти только на странице вывода.

возвращает `None`

выполнение занимает `1` операцию.

пример использования:
`quick_print("привет, мама")`
@code_tooltip_max = `max(a,b)`
Получает максимум из последовательности элементов или нескольких переданных аргументов.
Можно использовать для чисел и строк.

перегрузки:
`max(a,b,c)`: Возвращает максимум из переданных аргументов.
`max(sequence)`: Возвращает максимум всех значений в последовательности.

выполнение занимает количество операций, равное числу сравнений.

пример использования:
`max([3,6,34,16])`
@code_tooltip_min = `min(a,b)`
Получает минимум из последовательности элементов или нескольких переданных аргументов.
Можно использовать для чисел и строк.

перегрузки:
`min(a,b,c)`: Возвращает минимум из переданных аргументов.
`min(sequence)`: Возвращает минимум всех значений в последовательности.

время выполнения зависит от входных данных.

пример использования:
`min([3,6,34,16])`
@code_tooltip_abs = `abs(number)`
Вычисляет абсолютное значение `number`.

возвращает `number`, если `number` положительное, `-number` в противном случае.

выполнение занимает количество операций, равное числу сравнений.

пример использования:
`abs(-69)`
@code_tooltip_random = `random()`
Выбирает случайное число между 0 (включительно) и 1 (исключительно).

возвращает случайное число.

выполнение занимает `1` операцию.

пример использования:
`def random_elem(list):
    index = random() * len(list) // 1
    return list[index]`
@code_tooltip_append = `list.append(element)`
Добавляет `element` в конец `list`.

возвращает `None`

выполнение занимает `1` операцию.

пример использования:
`list = []
list.append(1)`
@code_tooltip_add = `set.add(element)`
Добавляет `element` в `set`.

возвращает `None`

выполнение занимает `1` операцию.

пример использования:
`set = {0}
set.add(1)`
@code_tooltip_remove = `collection.remove(element)`
Удаляет первое вхождение `element` из `collection`.

возвращает `None`

выполнение занимает `1` операцию для множества, количество операций, равное числу сравнений, для списка.

пример использования:
`list = [True, False, None]
list.remove(False)`
@code_tooltip_pop = `collection.pop()`
Удаляет последний элемент из списка или указанный элемент из словаря.
`list.pop(i)` удаляет элемент с индексом `i` из `list`.

возвращает удаленный элемент

выполнение занимает `1` операцию для словаря, `len(list) - i + 1` операций для списка.

пример использования:
`list = [True, False, None]
list.pop(0)`
@code_tooltip_insert = `list.insert(i, element)`
Вставляет `element` в `list` на индекс `i`.

возвращает `None`

выполнение занимает `len(list) - i + 1` операций.

пример использования:
`list = [1,2]
list.insert(0, 0)`
@code_tooltip_Items = Содержит все предметы, которые могут быть в инвентаре. Можно перебирать с помощью цикла `for`.
@code_tooltip_Entities = Содержит все растения и другие сущности, которые могут находиться на плитке земли фермы. Можно перебирать с помощью цикла `for`.
@code_tooltip_Grounds = Содержит все возможные плитки земли. Можно перебирать с помощью цикла `for`.
@code_tooltip_Unlocks = Содержит все разблокировки и улучшения в меню исследований. Можно перебирать с помощью цикла `for`.
@code_tooltip_for = Цикл, который перебирает все элементы последовательности. В некоторых языках называется "foreach" циклом.
@code_tooltip_while = Цикл, который выполняется, пока условие истинно.
@code_tooltip_def = Определяет функцию.
@code_tooltip_True = Логическое значение, которое всегда истинно.
@code_tooltip_False = Логическое значение, которое всегда ложно.
@code_tooltip_if = Выполняет код, если условие `True`.
@code_tooltip_None = Значение, представляющее отсутствие значения.
@code_tooltip_continue = Немедленно продолжает следующую итерацию цикла. Если есть вложенные циклы, это всегда будет влиять на самый внутренний цикл.
@code_tooltip_break = Прерывает цикл и продолжает выполнение операторов после цикла. Если есть вложенные циклы, это всегда будет влиять на самый внутренний цикл.

